Primary domain inbound event - tock

domain generated events:
Hour changed
Minute changed
Second Changed
Month Changed
Day changed

Domain objects
Hour
Minute
Second
Month
Day

they all observe the tock ie CanBeTicked
they CanBeObserved


---
it 1:
 test drive the seconds object

---
it 2:
 test driver a ticker, this has to accept an object that has tick(Calendar) and it ticks it at an interval
 wire this up in main and get a view of Seconds working
 -- presenter implemented
 -- view speced out
 -- DONE todo ticker, consider extracting role for tick from seconds, give seconds to this ticker which ticks it at an interval
 -- DONE todo implement a view class, this needs a layout and inflated view class
 -- DONE todo integrate into app, this needs a container view class and layout that wires up the presenter, inflated view and app service layer, need an app service layer and app factory

---
it 3:
 implement minutes and remove minute code from hacktivity -- DONE

---
it 4:
 refactor main factory class, think it can be used in tests.
 implement hours presenter,
 implement hours,
 implement view and integrate
 remove view code from hacktivity
 DONE

 ---
it 5:
 implement day presenter,
 implement view,
 integrate view, presenter and outer shell,
 remove view code from hactivity,
 implement day domain object
 DONE

---
it 6:
 implement month presetner, view and domain object
 extract DayFromTickTock
 fix failing test
 DONE

---
it 7:
 make observerables notify observer of current state upon observation
 a console watchface
 rotation


construct domain objects with current time
implement un-observe to stop views leaking
low resolution ticking when display dim
app tear down